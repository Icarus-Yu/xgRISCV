PC	Machine Code	Basic Code
0x0	0x08700113	addi x2 x0 135
0x4	0x00811113	slli x2 x2 8	//
0x8	0x06510113	addi x2 x2 101
0xc	0x01011113	slli x2 x2 16
0x10	0x04300193	addi x3 x0 67
0x14	0x00819193	slli x3 x3 8    //
0x18	0x02118193	addi x3 x3 33
0x1c	0x00310133	add x2 x2 x3
0x20	0x00202023	sw x2 0(x0)	s   // 第一次保存
0x24	0x00800593	addi x11 x0 8
0x28	0x00002783	lw x15 0(x0)   //数据冒险
0x2c	0x00000133	add x2 x0 x0
0x30	0x00F00213	addi x4 x0 15
0x34	0x0047F3B3	and x7 x15 x4   //数据冒险
0x38	0x00211493	slli x9 x2 2
0x3c	0x0093D3B3	srl x7 x7 x9
//为跳转操作准背操作数，
//x5 = 240 (0xF0)

x12 = 0

x13 = 1

x3 = 1
0x40	0x00421293	slli x5 x4 4
0x44	0x00010633	add x12 x2 x0
0x48	0x000386B3	add x13 x7 x0
0x4c	0x00110193	addi x3 x2 1

//功能: 比较 x3 和 x11 的值。如果相等，则跳转到 PC + 44 (0x50 + 0x2c = 0x7c)。
//流水线行为:

ID阶段: 指令被译码为 beq。CPU从寄存器堆读取 x3 的值（1）和 x11 的值（在第二部分中已设为 8）。

预测: 此时，CPU不知道分支是否会成功。它采用最简单的策略：预测分支不成立 (Predict Not Taken)。因此，它会继续到 0x54 去取下一条指令。

EX阶段: beq 指令进入执行阶段。ALU对操作数进行比较（实际上是做减法 1 - 8）。结果不为零，因此 Zero_EX 标志位为0。branch_taken_EX 信号被判断为 0（分支不跳转）。

结果: 预测正确！ 因为分支确实没有发生，所以先前在 0x54 取到的指令是完全正确的。流水线不需要任何冲刷（Flush）或暂停（Stall），继续顺畅地执行。
0x50	0x02B18663	beq x3 x11 44
0x54	0x0057F433	and x8 x15 x5
0x58	0x00219513	slli x10 x3 2
0x5c	0x00A45433	srl x8 x8 x10
0x60	0x0086A733	slt x14 x13 x8//x14的值为1,因为x13=1 ，x8=14

0x64	0x00070663	beq x14 x0 12//分支不成立
0x68	0x000406B3	add x13 x8 x0
0x6c	0x00018633	add x12 x3 x0
0x70	0x00429293	slli x5 x5 4
0x74	0x00118193	addi x3 x3 1
0x78	0xFD9FF06F	jal x0 -40  //无条件跳转，控制冒险的实现
//流水线行为:
//IF阶段: jal 指令在 PC=0x78 处被取出。与此同时，PC更新为 0x7c，准备取下一条指令。
//ID阶段: jal 指令进入译码阶段。
//控制冒险发生: HazardDetectionUnit 立刻识别出这是一条 jal 指令，意味着控制流必定会改变。
//而此时，位于 0x7c 的指令（slt x14, x2, x12）已经被错误地取入了IF阶段。
//冒险单元发出指令:
//flush_ID = 1：命令 IF/ID 寄存器在下一个时钟周期被清空（载入一个NOP指令）。
//NPCOp_out = NPC_JUMP：命令 PC_NPC 单元准备执行一次跳转。
//NPCImm_out = -40, base_PC_out = 0x78：提供跳转所需的偏移量和基地址。


//第四部分程序
0x7c	0x00C12733	slt x14 x2 x12
0x80	0x00070463	beq x14 x0 8
0x84	0x04C000EF	jal x1 76
0x88	0x00421213	slli x4 x4 4
0x8c	0x00110113	addi x2 x2 1
0x90	0xFAB112E3	bne x2 x11 -92
0x94	0x00F02223	sw x15 4(x0)
0x98	0x0FF00113	addi x2 x0 255
0x9c	0x00811113	slli x2 x2 8	//
0xa0	0x0FF10113	addi x2 x2 255
0xa4	0x01011113	slli x2 x2 16
0xa8	0x00416093	ori x1 x2 4
0xac	0x00C16113	ori x2 x2 12
0xb0	0x0000A283	lw x5 0(x1)
0xb4	0x1002F293	andi x5 x5 256
0xb8	0x00028663	beq x5 x0 12
0xbc	0x00402183	lw x3 4(x0)
0xc0	0x0080006F	jal x0 8
0xc4	0x00002183	lw x3 0(x0)
0xc8	0x00312023	sw x3 0(x2)
0xcc	0xFE5FF06F	jal x0 -28
0xd0	0x00F00293	addi x5 x0 15
0xd4	0x00261513	slli x10 x12 2
0xd8	0x00A292B3	sll x5 x5 x10
0xdc	0x00526333	or x6 x4 x5
0xe0	0xFFF34313	xori x6 x6 -1
0xe4	0x0067F7B3	and x15 x15 x6
0xe8	0x00969433	sll x8 x13 x9
0xec	0x0087E7B3	or x15 x15 x8
0xf0	0x00A393B3	sll x7 x7 x10
0xf4	0x0077E7B3	or x15 x15 x7
0xf8	0x00008067	jalr x0 x1 0
